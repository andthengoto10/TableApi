{"version":3,"sources":["My/MyForm.js","My/MyTable.js","My/My.js","MuiTable/MuiTable.js","MuiTable/MTable.js","ReactBotstrapTable/ReactBotstrapTable.js","SimpleTable/SimpleTable.js","SimpleTable/STable.js","Home/Home.js","ReactBotstrapTable/SearchTable.js","Content/Content.js","App.js","serviceWorker.js","store.js","index.js"],"names":["renderField","input","label","type","meta","touched","error","placeholder","renderMembers","fields","submitFailed","onClick","push","map","member","index","key","remove","Field","name","component","reduxForm","form","handleSubmit","pristine","reset","submitting","onSubmit","FieldArray","disabled","connect","state","values","getFormValues","members","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","m","id","mNummer","email","city","My","MyTable","Component","props","data","username","MTable","fetch","response","json","console","log","this","setState","className","MuiTable","ReactBotstrapTable","ref","dataField","isKey","React","item","STable","Home","SearchTable","pagination","search","Content","class","to","exact","path","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","formReducer","createStore","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21193996.chunk.js","sourcesContent":["import React from \"react\";\nimport { Field, FieldArray, reduxForm } from \"redux-form\";\n\nconst renderField = ({ input, label, type, meta: { touched, error } }) => (\n  <div>\n    <label>{label}</label>\n    <div>\n      <input {...input} type={type} placeholder={label} />\n      {touched && error && <span>{error}</span>}\n    </div>\n  </div>\n);\n\nconst renderMembers = ({ fields, meta: { error, submitFailed } }) => (\n  <ul>\n    <li>\n      <button type=\"button\" onClick={() => fields.push({})}>\n        Add Member\n      </button>\n      {submitFailed && error && <span>{error}</span>}\n    </li>\n    {fields.map((member, index) => (\n      <li key={index}>\n        <button type=\"button\" onClick={() => fields.remove(index)}>\n          Remove Member\n        </button>\n        <h4>Member #{index + 1}</h4>\n        <Field\n          name={`${member}.id`}\n          type=\"number\"\n          component={renderField}\n          label=\"ID\"\n        />\n        <Field\n          name={`${member}.mNummer`}\n          type=\"number\"\n          component={renderField}\n          label=\"MatrikelNummer\"\n        />\n        <Field\n          name={`${member}.name`}\n          type=\"text\"\n          component={renderField}\n          label=\"Name\"\n        />\n        <Field\n          name={`${member}.email`}\n          type=\"e-mail\"\n          component={renderField}\n          label=\"E-mail\"\n        />\n        <Field\n          name={`${member}.city`}\n          type=\"text\"\n          component={renderField}\n          label=\"Stadt\"\n        />\n      </li>\n    ))}\n  </ul>\n);\n\nconst MyForm = ({ handleSubmit, pristine, reset, submitting }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <FieldArray name=\"members\" component={renderMembers} />\n      <div>\n        <button type=\"submit\" disabled={submitting}>\n          Submit\n        </button>\n        <button type=\"button\" disabled={pristine || submitting} onClick={reset}>\n          Clear Values\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default reduxForm({\n  form: \"MyForm\"\n})(MyForm);\n","import React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { connect } from \"react-redux\";\nimport { getFormValues } from \"redux-form\";\n\nconst SimpleTable = ({\n  values = {\n    members: [\"1\", \"1234\", \"andthen\", \"qwer@qwe.qwe\", \"Newport\"]\n  }\n}) => (\n  <Paper>\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>ID</TableCell>\n          <TableCell align=\"right\">Matrikel Nummer</TableCell>\n          <TableCell align=\"right\">Name</TableCell>\n          <TableCell align=\"right\">E-mail</TableCell>\n          <TableCell align=\"right\">Stadt</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {values.members.map(m => (\n          <TableRow key={`${m.id}`}>\n            <TableCell align=\"right\">{m.id}</TableCell>\n            <TableCell align=\"right\">{m.mNummer}</TableCell>\n            <TableCell align=\"right\">{m.name}</TableCell>\n            <TableCell align=\"right\">{m.email}</TableCell>\n            <TableCell align=\"right\">{m.city}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </Paper>\n);\n\nexport default connect(state => ({\n  values: getFormValues(\"MyForm\")(state)\n}))(SimpleTable);\n","import React, { Component } from 'react'\nimport MyForm from './MyForm';\nimport MyTable from './MyTable';\n\nexport default class My extends Component {\n    render() {\n        return (\n            <div>\n                <p>My form</p>\n                <MyForm/>\n                <MyTable/>\n            </div>\n        )\n    }\n}\n","import React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nexport default props => (\n  <Paper>\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>ID</TableCell>\n          <TableCell align=\"right\">Name </TableCell>\n          <TableCell align=\"right\">Username</TableCell>\n          <TableCell align=\"right\">E-mail</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {props.data.map(m => (\n          <TableRow key={`${m.id}`}>\n            <TableCell align=\"right\">{m.id}</TableCell>\n            <TableCell align=\"right\">{m.name}</TableCell>\n            <TableCell align=\"right\">{m.username}</TableCell>\n            <TableCell align=\"right\">{m.email}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </Paper>\n);\n","import React, { Component } from \"react\";\nimport MuiTable from \"./MuiTable\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass MTable extends Component {\n  state = {\n    data: []\n  };\n  async componentDidMount() {\n    const response = await fetch(` https://jsonplaceholder.typicode.com/users`);\n    const data = await response.json();\n    console.log(data);\n    this.setState({\n      data\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">{<MuiTable data={this.state.data} />}</div>\n    );\n  }\n}\n\nexport default MTable;\n","import React from \"react\";\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\n\nexport default class ReactBotstrapTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n  async componentDidMount() {\n    const response = await fetch(` https://jsonplaceholder.typicode.com/users`);\n    const data = await response.json();\n    console.log(data);\n    this.setState({\n      data\n    });\n  }\n\n  render() {\n    return (\n      <BootstrapTable ref=\"table\" data={this.state.data}>\n        <TableHeaderColumn ref=\"id\" dataField=\"id\" isKey={true}>\n          Student ID\n        </TableHeaderColumn>\n        <TableHeaderColumn ref=\"name\" dataField=\"name\">\n          Name\n        </TableHeaderColumn>\n        <TableHeaderColumn ref=\"username\" dataField=\"username\">\n          Username\n        </TableHeaderColumn>\n        <TableHeaderColumn ref=\"email\" dataField=\"email\">\n          Email\n        </TableHeaderColumn>\n      </BootstrapTable>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default props => (\n  <table className=\"table\">\n    <thead>\n      <tr>\n        <th>ID</th>\n        <th>Name</th>\n        <th>UserName</th>\n        <th>E-mail</th>\n      </tr>\n    </thead>\n    <tbody>\n      {props.data.map(item => (\n        <tr key={item.id}>\n          <td>{item.id}</td>\n          <td>{item.name}</td>\n          <td>{item.username}</td>\n          <td>{item.email}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import React, { Component } from \"react\";\nimport SimpleTable from \"./SimpleTable\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass STable extends Component {\n  state = {\n    data: []\n  };\n  async componentDidMount() {\n    const response = await fetch(` https://jsonplaceholder.typicode.com/users`);\n    const data = await response.json();\n    console.log(data);\n    this.setState({\n      data\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">{<SimpleTable data={this.state.data} />}</div>\n    );\n  }\n}\n\nexport default STable;\n","import React, { Component } from \"react\";\nimport \"./Home.css\";\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div className=\"about\">\n        <h1 className=\"thisis\">One task with different results.</h1>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\n\nexport default class SearchTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n  async componentDidMount() {\n    const response = await fetch(` https://jsonplaceholder.typicode.com/users`);\n    const data = await response.json();\n    console.log(data);\n    this.setState({\n      data\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <BootstrapTable\n          ref=\"table\"\n          data={this.state.data}\n          pagination={true}\n          search={true}\n        >\n          <TableHeaderColumn dataField=\"id\" isKey={true}>\n            ID\n          </TableHeaderColumn>\n          <TableHeaderColumn dataField=\"name\">Name</TableHeaderColumn>\n          <TableHeaderColumn dataField=\"username\">Username</TableHeaderColumn>\n          <TableHeaderColumn dataField=\"email\">E-mail</TableHeaderColumn>\n        </BootstrapTable>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Route, Link, Switch, Redirect } from \"react-router-dom\";\nimport My from \"../My/My\";\nimport MTable from \"../MuiTable/MTable\";\nimport ReactBotstrapTable from \"../ReactBotstrapTable/ReactBotstrapTable\";\nimport STable from \"../SimpleTable/STable\";\nimport Home from \"../Home/Home\";\nimport SearchTable from \"../ReactBotstrapTable/SearchTable\";\n\nclass Content extends Component {\n  render() {\n    return (\n      <div class=\"content\">\n        <div className=\"menu navbar navbar-fixed-top\">\n          <ul className=\"list-group list-group-horizontal\">\n            <li className=\"list-group-item\">\n              <Link to=\"/\">About</Link>\n            </li>\n            <li className=\"list-group-item\">\n              <Link to=\"/my\">My</Link>\n            </li>\n            <li className=\"list-group-item\">\n              <Link to=\"/simpleTable\">Simple Table</Link>\n            </li>\n            <li className=\"list-group-item\">\n              <Link to=\"/muiTable\">Mui Table</Link>\n            </li>\n            <li className=\"list-group-item\">\n              <Link to=\"/reactBotstrapTable\">React Botstrap Table</Link>\n            </li>\n            <li className=\"list-group-item\">\n              <Link to=\"/searchTable\">Search Botstrap Table</Link>\n            </li>\n          </ul>\n        </div>\n        <div className=\"App-body\">\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/My\" component={My} />\n            <Route path=\"/SimpleTable\" component={STable} />\n            <Route path=\"/MuiTable\" component={MTable} />\n            <Route path=\"/ReactBotstrapTable\" component={ReactBotstrapTable} />\n            <Route path=\"/SearchTable\" component={SearchTable} />\n            <Redirect to=\"/\" />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Content;\n","import React from \"react\";\nimport Content from \"./Content/Content\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst App = () => (\n  <div className=\"container\">\n    <Content />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore, combineReducers} from \"redux\";\nimport {reducer as formReducer} from \"redux-form\";\n\nconst rootReducer = combineReducers({\n    form: formReducer\n});\n\nexport default createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App />\n        </Router>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}